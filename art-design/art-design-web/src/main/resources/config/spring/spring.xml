<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
       <property name="locations">
            <list>
                <value>classpath:config/env/${project.env}/config.properties</value>
                <value>classpath:config/env/${project.env}/disconf.properties</value>
                <value>classpath:config/env/${project.env}/jdbc.properties</value>
                <value>classpath:config/env/${project.env}/redis.properties</value>
            </list>
        </property>
    </bean>

	<!-- 隐式地向 Spring 容器注册 -->
	<context:annotation-config />
	<aop:aspectj-autoproxy />
<!-- 	<task:annotation-driven/> -->
	<!-- 扫描注解Bean -->
	<context:component-scan base-package="com.art.design.common"/>
    <context:component-scan base-package="com.art.design.api"/>
    <context:component-scan base-package="com.art.design.service"/>
    <context:component-scan base-package="com.art.design.model"/>
    <context:component-scan base-package="com.art.design.dao"/>
    <context:component-scan base-package="com.art.design.web"/>

    <!-- 动态数据源 -->
    <bean id="dataSource" class="com.art.design.service.common.DynamicDataSource" >
        <!-- 已配置的数据源 -->
        <property name="targetDataSources">
            <map>
                <entry key="READ" value-ref="readDataSource"/>
                <entry key="WRITE" value-ref="writeDataSource"/>
            </map>
        </property>
        <!-- 默认的数据源 -->
        <property name="defaultTargetDataSource" ref="writeDataSource"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:config/mybatis/mybatis.cfg.xml"></property>
        <property name="typeAliasesPackage" value="com.art.design.model"/>
        <property name="mapperLocations" value="classpath:mapper/*/*Mapper.xml"/>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.art.design.dao"/>
        <property name="annotationClass" value="org.springframework.stereotype.Repository"/>
    </bean>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    
    <bean id="audience" class="com.art.design.service.common.DynamicDataSourceAspect"></bean>
    <aop:config expose-proxy="true">
        <aop:aspect ref="audience" order="0">
            <aop:before pointcut="execution (* com.art.design.service.*.*.*.query*(..))" method="switchReadDataSource"/>
            <aop:before pointcut="execution (* com.art.design.service.*.*.*.load*(..))" method="switchReadDataSource"/>
            <!--<aop:before pointcut="execution (* com.art.design.service.*.*.*.get*(..))" method="switchReadDataSource"/>-->
            <aop:before pointcut="execution (* com.art.design.service.*.*.*.sel*(..))" method="switchReadDataSource"/>
            <aop:before pointcut="execution (* com.art.design.service.*.*.*.find*(..))" method="switchReadDataSource"/>

            <aop:after pointcut="execution (* com.art.design.service.*.*.*.query*(..))" method="clearDataSourceContextHolder"/>
            <aop:after pointcut="execution (* com.art.design.service.*.*.*.load*(..))" method="clearDataSourceContextHolder"/>
            <!--<aop:before pointcut="execution (* com.art.design.service.*.*.*.get*(..))" method="switchReadDataSource"/>-->
            <aop:after pointcut="execution (* com.art.design.service.*.*.*.sel*(..))" method="clearDataSourceContextHolder"/>
            <aop:after pointcut="execution (* com.art.design.service.*.*.*.find*(..))" method="clearDataSourceContextHolder"/>
        </aop:aspect>
    </aop:config>


    <bean id="performence" class="com.art.design.service.common.PerformenceMonitor"></bean>
    <aop:config expose-proxy="true">
        <aop:aspect ref="performence" order="1">
            <aop:around pointcut="execution (* com.art.design.service.logic.*.*.*(..))" method="doAround"/>
        </aop:aspect>
    </aop:config>

	<import resource="spring-datasource-druid.xml"/>
<!--     <import resource="spring-disconf.xml"/> -->
<!--     <import resource="spring-dubbo-consumer.xml"/> -->
<!--     <import resource="spring-dubbo-producer.xml"/> -->
    <import resource="spring-redis.xml"/>
<!--     <import resource="spring-timer.xml"/> -->
    
<!--     <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> -->
<!--         <property name="maxUploadSize" value="100000"/> -->
<!--     </bean> -->

    <!-- 线程池 -->
    <!-- 
    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="100" />
        <property name="maxPoolSize" value="200" />
        <property name="queueCapacity" value="1000" />
        <property name="keepAliveSeconds" value="300" />
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy" />
        </property>
    </bean>
     -->

    <!-- 线程池 -->
    <!-- 
    <bean id="taskExecutorForSolr" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="20" />
        <property name="maxPoolSize" value="50" />
        <property name="queueCapacity" value="500" />
        <property name="keepAliveSeconds" value="300" />
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy" />
        </property>
    </bean>
     -->

	<!-- 项目启动初始化话redis -->
<!-- 	<bean id="sysInitRedis" class="com.art.design.system.SysInitRedis"/> -->

</beans>